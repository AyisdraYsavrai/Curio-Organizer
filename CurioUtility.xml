<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- MuClient version 4.94 -->

<muclient>
<plugin
   name="CurioUtility"
   purpose="Curio Organizer and Curio Rubber"
   id="10c2d67a4b175a5886f234df"
   language="Lua"
   save_state="y"
   date_written="2015-10-29 21:03:38"
   requires="4.94"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   group="CurioOrganizer"
   enabled="y"
   name="CurioOrganizerStart"   
   match="^\*+\[ Curio Pieces \]\*+$"
   regexp="y"
   script="curioOrganizerStart"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerMore"   
   match="^(Type MORE to continue reading\.)|(You continue reading\:)"
   omit_from_output="y"
   regexp="y"
   script="curioOrganizerMore"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerEnd"   
   match="^Total Curios: "
   regexp="y"
   script="curioOrganizerEnd"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerPieces"   
   match="^(\d+)\s+(Rare|Piece)\s+(.+)"
   omit_from_output="y"
   regexp="y"
   script="curioOrganizerPieces"
   sequence="100"
  >
  </trigger>

 
 <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberHeading"   
   match="^\*+\[ All Curios \(\*.+\*\) \]\*+$"
   regexp="y"
   script="curioRubberHeading"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberMore"   
   match="^(Type MORE to continue reading\.)|(You continue reading\:)"
   omit_from_output="y"
   regexp="y"
   script="curioRubberMore"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberEnd"   
   match="^Total Curios: "
   regexp="y"
   script="curioRubberEnd"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberPieces"   
   match="^(\d+)\s+(Rare|Piece).+"
   regexp="y"
   script="curioRubberPieces"
   sequence="100"
  >
  </trigger>  
  
</triggers>

<!--  Aliases  -->

<aliases>

  <alias
   group="CurioRubber"
   enabled="y"
   name="curioGetRubList"
   match="crub (.+)"
   regexp="y"
   script="curioRubberStart"
   ignore_case="y"
   sequence="100"
  >
  </alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[

function curioOrganizerStart(name, line, wildcards)
	CurioTable = {}
	CurioTable.Collections = {}
	CurioTable.SetLength = 21 
	CurioTable.CollectionLength = 13
	 
	--enable the triggers that will read, autosend "more", and output the results
	EnableTrigger("CurioOrganizerMore", true)
	EnableTrigger("CurioOrganizerEnd", true)
	EnableTrigger("CurioOrganizerPieces", true)
end

function curioOrganizerMore(name, line, wildcards)

	if wildcards[1] == "Type MORE to continue reading." then
		Send("more")
	end
end

function curioOrganizerEnd(name, line, wildcards)
	--the data gathering has finished
	--disable the triggers that read and autosent "more" and the trigger that is displaying the results right now
	EnableTrigger("CurioOrganizerMore", false)
	EnableTrigger("CurioOrganizerEnd", false)
	EnableTrigger("CurioOrganizerPieces", false)
 
	--make some space before you output the results
	Note()
	for COCollectionName,COCollection in pairs(CurioTable.Collections) do
		--display the name of the Collection and make a link to search for the collection
		Hyperlink("curios all " .. COCollectionName,"["..COCollectionName.."]", "search for this collection", "steelblue", "", 0, true)
		
				 
		--add some extra boarder but make it even with all the other boarders
		for i = 1,52 - COCollectionName:len() do
				ColourTell("steelblue", "", "=")
		end
	 
		--finish this line before you output all the sets
		Note()
		 
		--create a number of spaces equal to the size of SetLength + 3
		for i = -2,CurioTable.SetLength do
				Tell(" ")
		end
	 
		--output some indices for the pieces
		--also indent the set
		Note("R  a  b  c  d  e  f  g  h  i\n   ")
		 
		--output all the sets in this collection
		for COSetName,COSet in pairs(COCollection) do
			--output the name of the set with a link to search for that set
			Hyperlink("curios all " .. COSetName, COSetName, "search for this set", "steelblue", "", 0, true)
			
			
			Tell("   ")
			--always start by listing the number of rare pieces in this set
			if COSet["Rare"] ~= nil then
				--color the output based on how many pieces we have
				if COSet["Rare"].count == 1 then
					--if we just have one, color it the normal gray
					--show we have one, with a tooltop of the piece name, and a link that searches for that piece
					Hyperlink("curios all " .. COSet["Rare"].name, "1", COSet["Rare"].name, "lightgray", "")
				 
					--create some space between this entry and the next entry
					Tell("  ")
				elseif COSet["Rare"].count > 1 and COSet["Rare"].count < 100 then
					--if we have spares to share, color it green
					--show how many we have, with a tooltop of the piece name, and a link that searches for that piece
					Hyperlink("curios all " .. COSet["Rare"].name, COSet["Rare"].count, COSet["Rare"].name, "green", "")
					
					 
					--create some space between this entry and the next entry
					--two digit numbers need one space
					--one digit numbes need two spaces
					if COSet["Rare"].count >= 10 then
						Tell(" ")
					else
						Tell("  ")
					end
				else
					--you have more than 99 of this curio somehow
					--show that this number is too big to display
					--still has a tooltip with the piece's name and gives a link to search for the pieces
					Hyperlink("curios all " .. COSet["Rare"].name, "#", COSet["Rare"].name, "lightgray", "")
					
					 
					--create some space between this entry and the next entry
					Tell("  ")
				end 
			else
				--You do not have the rare piece. Put a red mark here with no link or tooltip
				ColourTell("red", "", "-  ")
			end
	 
			--get ready to count how many types of regular pieces we are missing in this set
			COMissingCount = 9
	 
			--output all the regular pieces in this set
			for COPieceName,COPiece in pairs(COSet) do
				--We have already seen the Rare Piece. Don't show the Rare.
				if COPieceName ~= "Rare" then
					--we have at least one of this piece. We are not missing this one.
					COMissingCount = COMissingCount - 1
	 
					--color the output based on how many pieces we have
					if COPiece.count == 1 then
						--if we just have one, color it the normal gray
						--show we have one, with a tooltop of the piece name, and a link that searches for that piece
						Hyperlink("curios all " .. COPieceName, "1", COPieceName, "lightgray", "")
						
					 
						--create some space between this entry and the next entry
						Tell("  ")
					elseif COPiece.count > 1 and COPiece.count < 100 then
						--if we have spares to share, color it green
						--show how many we have, with a tooltop of the piece name, and a link that searches for that piece
						Hyperlink("curios all " .. COPieceName, COPiece.count, COPieceName, "green", "")
						
					 
						--create some space between this entry and the next entry
						--two digit numbers need one space
						--one digit numbes need two spaces
						if COPiece.count >= 10 then
							Tell(" ")
						else
							Tell("  ")
						end
					else
						--you have more than 99 of this curio somehow
						--show that this number is too big to display
						--still has a tooltip with the piece's name and gives a link to search for the pieces
						Hyperlink("curios all " .. COPieceName, "#", COPieceName, "lightgray", "")
						
					 
						--create some space between this entry and the next entry
						Tell("  ")
					end 
				end
			end
	 
			--note all the pices that you don't have yet
			--there are no tooltips or links to work with as we don't know what the pieces should be
			for i = 1,COMissingCount do
				ColourTell("red","", "-  ")
			end
	 
			--check if you have every piece
			if COMissingCount == 0 and COSet["Rare"] ~= nil then
				--create a series of commands to build the curio
				COBuildMeCommands = ""
				pluginIDNum = "10c2d67a4b175a5886f234df"
				
				--attach each piece to the rare
				for COPieceName,COPiece in pairs(COSet) do
					
					COBuildMeCommands = COBuildMeCommands .. "curio attach " .. COSet["Rare"].id .. " to " .. COPiece.id .. ";"					
					
				end
				--display a message that shows the curio is ready
				--it contains a link to build the curio and the tooltip informs the user what this will do
				Hyperlink("!!10c2d67a4b175a5886f234df:curioBuildNow("..COBuildMeCommands..")", "Build Me!", "Instantly constructs the curio", "yellow", "")
			end
	 
			--put a line between each curio set and indent the curio set
			Note("\n\n   ")
	 
		end
			--put a line beteen each collection
		Note()
	end
end

function curioBuildNow(cmds)
	--take our command string and break it up to be sent
	
	curioBuildCommands = {}
	index = 1
	for value in string.gmatch(cmds ,"([^;]+)") do 
		curioBuildCommands[index] = value
		index = index + 1
	end
	for key, curioCommand in pairs(curioBuildCommands) do
		Send(curioCommand)
	end
	
end

function curioOrganizerPieces(name, line, wildcards)


	curioId = wildcards[1]
	curioType = wildcards[2]
	curioRest = wildcards[3] -- holds Set, Collection, Description
	
	--start by dicing up curioRest into the Set, Collection, and Description (the size of each piece can be set in Curio Organizer Start)
	CurioTable.Set = string.sub(curioRest,1,CurioTable.SetLength)
	CurioTable.Collection = string.sub(curioRest,CurioTable.SetLength+1,CurioTable.SetLength + CurioTable.CollectionLength)
	CurioTable.Description = string.sub(curioRest,CurioTable.SetLength + CurioTable.CollectionLength+1)
	 
	--trim down each piece, removing outside spaces
	--CurioTable.Set = CurioTable.Set:match "^%s*(.-)%s*$"
	CurioTable.Collection = CurioTable.Collection:match "^%s*(.-)%s*$"
	CurioTable.Description = CurioTable.Description:match "^%s*(.-)%s*$"
	 
	--start with the Collection. Be sure the Collection exists
	if CurioTable.Collections[CurioTable.Collection] == nil then
		--the collection did not exist yet. Create a table for this Collection
		CurioTable.Collections[CurioTable.Collection] = {}
	end
	 
	--next, be sure this Set exists
	if CurioTable.Collections[CurioTable.Collection][CurioTable.Set] == nil then
		--the Set within this Collection did not exist yet. Create a table for this Set
		CurioTable.Collections[CurioTable.Collection][CurioTable.Set] = {}
	end
	 
	--is this piece a Rare?
	if curioType == "Rare" then
		--check to see if this Rare existed yet
		if CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"] == nil then
			--the Rare within this Set did not exist yet. Create a table for this Rare
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"] = {}
			--note down the description of the Rare
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"].name = CurioTable.Description
			--note down the id of the first found Rare in this set
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"].id = curioId
			--note down that we just found one of this Rare
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"].count = 1
		else
			--note that we found one more curio of this description
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"].count = CurioTable.Collections[CurioTable.Collection][CurioTable.Set]["Rare"].count + 1
		end
	else
		--check to see if this piece existed yet
		if CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description] == nil then
			--the piece within this set did not exist yet. Create a table for this piece.
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description] = {}
			--note down the id of the first found curio with this description
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description].id = curioId
			--note down that we just found one of this curio
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description].count = 1
		else
			--note that we found one more curio of this description
			CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description].count = CurioTable.Collections[CurioTable.Collection][CurioTable.Set][CurioTable.Description].count + 1
		end
	end
end


function curioRubberStart(name, line, wildcards)
	
	searchPattern = wildcards[1]
	
	EnableTrigger("CurioRubberHeading", true)
	EnableTrigger("CurioRubberMore", true)
	EnableTrigger("CurioRubberEnd", true)
	EnableTrigger("CurioRubberPieces", true)
	
	Send("curios all " .. searchPattern)	
	
end

function curioRubberHeading(name, line, wildcards)
	curiosToRubTable = {}
	rubIndex = 1
end

function curioRubberMore(name, line, wildcards)

	if wildcards[1] == "Type MORE to continue reading." then
		Send("more")
	end
end

function curioRubberEnd(name, line, wildcards)
	EnableTrigger("CurioRubberHeading", false)
	EnableTrigger("CurioRubberMore", false)
	EnableTrigger("CurioRubberEnd", false)
	EnableTrigger("CurioRubberPieces", false)
 
	--make some space before you output the results
	Note()
	
	ColourNote("steelblue", "", "You have requested to rub " .. #curiosToRubTable)
	ColourTell("red", "", "You have the following curio ids in the rubber: ")
	
	for k, v in pairs (curiosToRubTable) do
		ColourTell("red", "", v .. ", ")	
	end
	Note()
	Hyperlink("!!10c2d67a4b175a5886f234df:curioRubberRub()", "Rub the above curios", "Rub the curios", "red", "")
	Note()
end

function curioRubberRub()
	
	for key, curio in pairs(curiosToRubTable) do
		Note("curio rub " .. curio)
	end
	
end

function curioRubberPieces(name, line, wildcards)
	curioId = wildcards[1]
	
	curiosToRubTable[rubIndex] = curioId
	rubIndex = rubIndex + 1
	
end

]]>
</script>
</muclient>
