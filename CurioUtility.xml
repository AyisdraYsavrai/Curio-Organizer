<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- MuClient version 4.94 -->

<muclient>
<plugin
   name="CurioUtility"
   purpose="Curio Organizer, Rubber, and Lister"
   id="10c2d67a4b175a5886f234df"
   language="Lua"
   save_state="y"
   date_written="2015-10-29 21:03:38"
   requires="4.94"
   version="2.1"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   group="CurioOrganizer"
   enabled="y"
   name="CurioOrganizerStart"   
   match="^\*+\[ Curio Pieces \]\*+$"
   regexp="y"
   script="curioOrganizerStart"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerMore"   
   match="^(Type MORE to continue reading\.)|(You continue reading\:)"
   omit_from_output="y"
   regexp="y"
   script="curioOrganizerMore"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerEnd"   
   match="^Total Curios: "
   regexp="y"
   script="curioOrganizerEnd"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioOrganizer"
   enabled="n"
   name="CurioOrganizerPieces"   
   match="^(\d+)\s+(Rare|Piece)\s+((?:\w|\s|\'|\-){0,21})\b\s+(\w+)\s+(.+)$"
   omit_from_output="y"
   regexp="y"
   script="curioOrganizerPieces"
   sequence="100"
  >
  </trigger>

 
 <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberHeading"   
   match="^\*+\[ All Curios \(\*.+\*\) \]\*+$"
   regexp="y"
   script="curioRubberHeading"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberMore"   
   match="^(Type MORE to continue reading\.)|(You continue reading\:)"
   omit_from_output="y"
   regexp="y"
   script="curioRubberMore"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberEnd"   
   match="^Total Curios: "
   regexp="y"
   script="curioRubberEnd"
   sequence="100"
  >
  </trigger>
  
  <trigger
   group="CurioRubber"
   enabled="n"
   name="CurioRubberPieces"   
   match="^(\d+)\s+(Rare|Piece)\s+((?:\w|\s|\-|'){0,21})\b\s+(\w+)\s+(.+)$"
   regexp="y"
   script="curioRubberPieces"
   sequence="100"
  >
  </trigger>  
  
</triggers>

<!--  Aliases  -->

<aliases>

  <alias
   group="CurioRubber"
   enabled="y"
   name="curioGetRubList"
   match="^crub (single )?(.+)?$"
   regexp="y"
   script="curioRubberStart"
   ignore_case="y"
   sequence="100"
  >
  </alias>
  
    <alias
   group="CurioInfo"
   enabled="y"
   name="curioInfoStart"
   match="^cinfo (.+)$"
   regexp="y"
   script="curioInfoStart"
   ignore_case="y"
   sequence="100"
  >
  </alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[

package.path = package.path .. ";" ..  GetPluginInfo(GetPluginID(), 20) .. "?.lua"
require "masterCurios"

function curioOrganizerStart(name, line, wildcards)
	CurioTable = {}
	pieceStringTable = {}
	setLength = 21 
	collectionLength = 13
	 
	--enable the triggers that will read, autosend "more", and output the results
	EnableTrigger("CurioOrganizerMore", true)
	EnableTrigger("CurioOrganizerEnd", true)
	EnableTrigger("CurioOrganizerPieces", true)
end

function curioOrganizerMore(name, line, wildcards)

	if wildcards[1] == "Type MORE to continue reading." then
		Send("more")
	end
end

function curioOrganizerEnd(name, line, wildcards)
	--the data gathering has finished
	--disable the triggers that read and autosent "more" and the trigger that is displaying the results right now
	EnableTrigger("CurioOrganizerMore", false)
	EnableTrigger("CurioOrganizerEnd", false)
	EnableTrigger("CurioOrganizerPieces", false)
 
	--make some space before you output the results
	Note()
	for collectionName, setTable in pairs(CurioTable) do
		Hyperlink("curios all " .. collectionName,"["..collectionName.."]", "search for this collection", "steelblue", "", 0, true)
		
		for i = 1,60 - collectionName:len() do
			ColourTell("steelblue", "", "=")
		end
		
		Note()

		for i = -1,setLength do
			Tell(" ")
		end
		--output some indices for the pieces
		Note("RR  01  02  03  04  05  06  07  08  09\n   ")
		
		for setName, pieceTable in pairs(setTable) do			
			
			Hyperlink("curios all " .. setName, setName, "search for this set", "steelblue", "", 0, true)
			
			for i = setName:len(), setLength+1 do
				Tell(" ")
			end
			
			masterHaveCurio = "no"
			for masterSet, _ in pairs(Curios) do
				if string.find(masterSet, setName) ~= nil then
					setName = masterSet
					masterHaveCurio = "yes"
				end				
			end
			
			if masterHaveCurio == "no" then
				ColourNote("red", "", "Curio - " .. setName .. " not in master list.")
				Note()
				break
			end
			
			
			pieceStringTable[setName] = {}
			for pieceName, pieceValues in pairs(pieceTable) do	
				
				for key, value in pairs(Curios[setName]) do					
					if string.find(value, pieceName) ~= nil then
						pieceNumber = tonumber(key)
					end
				end
				
				if pieceValues.count == nil then
					pieceValues.count = 0
				end
				
				if pieceValues["type"] == "Rare" then
					pieceStringTable[setName][0] = pieceName .. "==" .. pieceValues.count
				else
					pieceStringTable[setName][pieceNumber] = pieceName .. "==" .. pieceValues.count
				end
				
				
			end	
			buildCount = 0
			for i = 0, 9 do 
				if pieceStringTable[setName][i] == nil then
					for key, value in pairs(Curios[setName]) do
						if key == 10 then
							key = 0
						end
						if i == tonumber(key) then
							pieceStringTable[setName][i] = value .. "==" .. "0"
							break
						end
					end					
				end
				
				pieceNameCount = pieceStringTable[setName][i]
				pieceName, value = string.match(pieceNameCount, "(.+)\=\=(.+)")
				havePiece = pieceName
				
				if value == "0" then
					haveColor = "red"
				elseif value ~= "0" then
					haveColor = "green"
				end
		
				Hyperlink("curios all " .. havePiece, string.format("%02d", value), havePiece, haveColor, "")
				Tell("  ")
				
				if tonumber(value) > 0 then
					buildCount = buildCount + 1
				end
			end
			--BUILD ME NOW HERE
			if buildCount == 10 then
				buildMeCommands = ""
				buildTempCount = 0
				buildTempId = ""
				
				for buildPiece, buildValues in pairs(CurioTable[collectionName][setName]) do
					
					if buildTempCount == 0 then
						buildTempId = buildValues.id
						buildTempCount = 1
					else
						buildMeCommands = buildMeCommands .. "curio attach " .. buildTempId .. " to " .. buildValues.id .. ";"	
					end					
				end
			
				Hyperlink("!!10c2d67a4b175a5886f234df:curioBuildNow("..buildMeCommands..")", "Build Me!", "Instantly constructs the curio", "yellow", "")
			else
				missingPieces = setName .. ": "
				for key, piece in pairs(Curios[setName]) do
					foundPiece = "no"
					for buildPiece, buildValues in pairs(CurioTable[collectionName][setName]) do
						if string.find(piece, buildPiece) ~= nil then
							foundPiece = "yes"
							break
						end
					end	
					if foundPiece == "no" then
						missingPieces = missingPieces .. piece .. ", "						
					end
				end
				
				missingPieces = missingPieces:gsub(", $", "")
				Hyperlink("!!10c2d67a4b175a5886f234df:curioMissingPieces("..missingPieces..")", "Missing Pieces", "Tells you missing pieces", "red", "")
			end
			
			Note()
		end
		Note()		
	end
end

function curioBuildNow(cmds)
	--take our command string and break it up to be sent
	
	curioBuildCommands = {}
	index = 1
	for value in string.gmatch(cmds ,"([^;]+)") do 
		curioBuildCommands[index] = value
		index = index + 1
	end
	for key, curioCommand in pairs(curioBuildCommands) do
		Send(curioCommand)
	end
	
end

function curioMissingPieces(pieceList)

	ColourNote("red", "", "You are missing the following pieces of the " .. pieceList)
end

function curioOrganizerPieces(name, line, wildcards)


	curioId = wildcards[1]
	curioType = wildcards[2]
	curioSet = wildcards[3]
	curioCollection = wildcards[4]
	curioPieceName = wildcards[5]
	
	for masterSet, _ in pairs(Curios) do
		if string.find(masterSet, curioSet) ~= nil then
			curioSet = masterSet
		end				
	end
	
	if CurioTable[curioCollection] == nil then
		CurioTable[curioCollection] = {}
	end

	if CurioTable[curioCollection][curioSet] == nil then
		CurioTable[curioCollection][curioSet] = {}
	end
	
	if CurioTable[curioCollection][curioSet][curioPieceName] == nil then
		CurioTable[curioCollection][curioSet][curioPieceName] = {}
		CurioTable[curioCollection][curioSet][curioPieceName].count = 0
	end
	
	CurioTable[curioCollection][curioSet][curioPieceName].id = curioId
	CurioTable[curioCollection][curioSet][curioPieceName]["type"] = curioType
	CurioTable[curioCollection][curioSet][curioPieceName].name = curioPieceName
	CurioTable[curioCollection][curioSet][curioPieceName].count = CurioTable[curioCollection][curioSet][curioPieceName].count + 1
end


--Rubber
function curioRubberStart(name, line, wildcards)
	
	searchPattern = wildcards[2]
	rubMode = wildcards[1]
	
	rubHaveTable = {}
	
	EnableTrigger("CurioRubberHeading", true)
	EnableTrigger("CurioRubberMore", true)
	EnableTrigger("CurioRubberEnd", true)
	EnableTrigger("CurioRubberPieces", true)
	
	Send("curios all " .. searchPattern)	
	
end

function curioRubberHeading(name, line, wildcards)
	curiosToRubTable = {}
	rubIndex = 1
end

function curioRubberMore(name, line, wildcards)

	if wildcards[1] == "Type MORE to continue reading." then
		Send("more")
	end
end

function curioRubberEnd(name, line, wildcards)
	EnableTrigger("CurioRubberHeading", false)
	EnableTrigger("CurioRubberMore", false)
	EnableTrigger("CurioRubberEnd", false)
	EnableTrigger("CurioRubberPieces", false)
 
	--make some space before you output the results
	Note()
	
	ColourNote("steelblue", "", "You have requested to rub " .. #curiosToRubTable .. " curios")
	ColourTell("red", "", "You have the following curio ids in the rubber: ")
	
	for k, v in pairs (curiosToRubTable) do
		ColourTell("red", "", v .. ", ")	
	end
	Note()
	Hyperlink("!!10c2d67a4b175a5886f234df:curioRubberRub()", "Rub the above curios", "Rub the curios", "red", "")
	Note()
end

function curioRubberRub()
	
	for key, curio in pairs(curiosToRubTable) do
		Send("curio rub " .. curio)
	end
	
end

function curioRubberPieces(name, line, wildcards)
	curioId = wildcards[1]
	curioType = wildcards[2]
	curioSet = wildcards[3]
	curioCollection = wildcards[4]
	curioPieceName = wildcards[5]
	
	if rubMode == "single " then
		if rubHaveTable[curioPieceName] == "yes" then
			curiosToRubTable[rubIndex] = curioId
		else
			rubHaveTable[curioPieceName] = "yes"
		end
	else	
		curiosToRubTable[rubIndex] = curioId
	end
	
	rubIndex = rubIndex + 1
	
end


--Informer
function curioInfoStart(name, line, wildcards)
	
	requestedInfo = curioCapitalizeFirstLetter(wildcards[1])
	if CurioCollections[requestedInfo] then
		curioList = ""
		ColourNote("Green","","The " .. requestedInfo .. " collection has the following: ")
		for i =1, #CurioCollections[requestedInfo] do
			cuco = CurioCollections[requestedInfo][i]
			Hyperlink("!!10c2d67a4b175a5886f234df:curioInfoGetCurio("..cuco..")", cuco, "List this curio's pieces", "steelblue", "", 0, true)
			if i ~= #CurioCollections[requestedInfo] then
				ColourTell("green","", ", ")
			end
		end
		curioList = curioList:gsub("^..", "")
		ColourNote("Green", "", curioList)
	elseif Curios[requestedInfo] then
		curioInfoGetCurio(requestedInfo)
	else
		ColourNote("red", "", "Unknown collection or set. Matching partial curios are: ")
		foundSets = {}
		for set, _ in pairs(Curios) do
			if string.find(set, requestedInfo) then
				table.insert(foundSets, set)
			end
		end
		for i =1, #foundSets do
			cmd = "cinfo " .. foundSets[i]
			Hyperlink("!!10c2d67a4b175a5886f234df:Execute(".. cmd .. ")", foundSets[i], "List curios in this collection", "steelblue", "", 0, true)
			if i ~= #foundSets then
				ColourTell("green", "", ", ")
			end
		end
		Note()
		Note()
		ColourNote("red", "", "The system has the following collections: ")
		for col, _ in pairs(CurioCollections) do
			cmd = "cinfo " .. col
			Hyperlink("!!10c2d67a4b175a5886f234df:Execute(".. cmd .. ")", col, "List curios in this collection", "steelblue", "", 0, true)
			
			if next(CurioCollections, col) ~= nil then
				ColourTell("green", "", ", ")
			end
		end
		Note()
		Note()
	end

	
end

function curioInfoGetCurio(curioToGet)

	if Curios[curioToGet] == nil then
		ColourNote("red", "", "requested curio " .. curioToGet .. " not in master list.")
	else
		pieceList = ""
		for _, piece in pairs(Curios[curioToGet]) do
			pieceList = pieceList .. ", " .. piece
		end
		pieceList = pieceList:gsub("^..", "")
		ColourNote("green", "", "The ".. curioToGet .. " curio has the following pieces: " .. pieceList)
	end

end

function curioCapitalizeFirstLetter(words)

	properCurio = ""
	for splitWords in words:gmatch("%S+") do
		splitWords = splitWords:gsub("^(.)", string.upper)
		properCurio = properCurio .. " " .. splitWords
	end
	properCurio = properCurio:gsub("^(%s)", "")
	return properCurio
	
end

]]>
</script>
</muclient>
